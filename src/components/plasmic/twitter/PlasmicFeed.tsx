// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hMHVnEgKCHqmbs9i49R9rv
// Component: yAu2w-50fbH
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ActionButton from "../../ActionButton"; // plasmic-import: IyIs__-7z4p/component
import Spacer from "../../Spacer"; // plasmic-import: 4U7GBFidZD-Z/component
import Avatar from "../../Avatar"; // plasmic-import: bv_MRIPv_2ll/component
import Button from "../../Button"; // plasmic-import: i-ypZPxxmHq7/component
import Tweet from "../../Tweet"; // plasmic-import: BH7mdVRR6kf/component
import SideSection from "../../SideSection"; // plasmic-import: 3gQqlFL5ZW_W/component
import Trend from "../../Trend"; // plasmic-import: T8T_aZ-pF5ms/component
import Suggestion from "../../Suggestion"; // plasmic-import: WACyS-tsqYl2/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Mpz4IKvZIe9W/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: hMHVnEgKCHqmbs9i49R9rv/projectcss
import * as sty from "./PlasmicFeed.module.css"; // plasmic-import: yAu2w-50fbH/css

import MagicIcon from "./icons/PlasmicIcon__Magic"; // plasmic-import: vitDHM3COZzM/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: Dbe69f6YScP3/icon
import HomeActiveIcon from "./icons/PlasmicIcon__HomeActive"; // plasmic-import: 7zmOerdQkk5W/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: GNJW3xqyvyld/icon
import NotificationsIcon from "./icons/PlasmicIcon__Notifications"; // plasmic-import: Z2ShTdodBXQy/icon
import MessagesIcon from "./icons/PlasmicIcon__Messages"; // plasmic-import: 0laxwXH72Mog/icon
import BookmarksIcon from "./icons/PlasmicIcon__Bookmarks"; // plasmic-import: t81Q1bWpOEDO/icon
import ListsIcon from "./icons/PlasmicIcon__Lists"; // plasmic-import: am13N2SVLTO2/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: 6Cd850r_u2Qo/icon
import MoreIcon from "./icons/PlasmicIcon__More"; // plasmic-import: _KRBM1jHguuU/icon
import PictureIcon from "./icons/PlasmicIcon__Picture"; // plasmic-import: 1Jh8FkMX_bUS/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: il0py2bxhpYR/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: OJsUog-ZyqoF/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: kJRLwpVtlCt7/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: B9-i7VmNPpaA/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: 0s9wvHHHLh0D/icon
import image2K8Lg82AeygQu from "./images/image2.png"; // plasmic-import: K8LG82aeygQu/picture
import image3SD1CQyhEiB09 from "./images/image3.png"; // plasmic-import: sD1CQyhEiB09/picture
import image5CyUoQfqXiRyL from "./images/image5.png"; // plasmic-import: CyUoQFQXiRyL/picture
import image4ZuqK5Tne8Cuc from "./images/image4.png"; // plasmic-import: zuqK5Tne8Cuc/picture
import image7YBoEbRz6OGiu from "./images/image7.png"; // plasmic-import: yBoEbRz6oGiu/picture
import image6ZDFbRojPdMu from "./images/image6.png"; // plasmic-import: zDFb_rojPdMu/picture
import image8DwAxYfIwgAj5 from "./images/image8.png"; // plasmic-import: DWAxYfIwgAj5/picture
import imageEv9XLgxOEr9M from "./images/image.png"; // plasmic-import: ev9XLgxOEr9m/picture

export type PlasmicFeed__VariantMembers = {};

export type PlasmicFeed__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeed__VariantsArgs;
export const PlasmicFeed__VariantProps = new Array<VariantPropType>();

export type PlasmicFeed__ArgsType = {};
type ArgPropType = keyof PlasmicFeed__ArgsType;
export const PlasmicFeed__ArgProps = new Array<ArgPropType>();

export type PlasmicFeed__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  newTweetInput?: p.Flex<"textarea">;
  tweetButton?: p.Flex<typeof Button>;
  tweetList?: p.Flex<"div">;
  searchInput?: p.Flex<"input">;
};

export interface DefaultFeedProps {
  className?: string;
}

function PlasmicFeed__RenderFunc(props: {
  variants: PlasmicFeed__VariantsArgs;
  args: PlasmicFeed__ArgsType;
  overrides: PlasmicFeed__OverridesType;
  dataFetches?: PlasmicFeed__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox___7Tmd)}>
            <div className={classNames(defaultcss.all, sty.freeBox__uw7Wn)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? false : true
              ) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox___8TrRm)}
                >
                  <div
                    className={classNames(defaultcss.all, sty.freeBox___1UK)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hqaNz)}
                      displayHeight={"30px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"30px" as const}
                      src={{
                        src: image2K8Lg82AeygQu,
                        fullWidth: 225,
                        fullHeight: 223,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__drStZ
                    )}
                  >
                    {"Home"}
                  </div>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton___98A7
                    )}
                    options={["medium", "primary"]}
                    slot={"25"}
                  >
                    <MagicIcon
                      className={classNames(defaultcss.all, sty.svg__uxed9)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__sKvhq)}>
                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__tkOcK
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <TwitterIcon
                      className={classNames(defaultcss.all, sty.svg__qooXh)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__xtY1J
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <HomeActiveIcon
                      className={classNames(defaultcss.all, sty.svg__fqRql)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__fn4P
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <Icon2Icon
                      className={classNames(defaultcss.all, sty.svg__qQtvl)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__aFJun
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <NotificationsIcon
                      className={classNames(defaultcss.all, sty.svg___2DEt)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__y9Ys7
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MessagesIcon
                      className={classNames(defaultcss.all, sty.svg__zfRlj)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__wqxkh
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <BookmarksIcon
                      className={classNames(defaultcss.all, sty.svg___6Sqn2)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__gGbW9
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ListsIcon
                      className={classNames(defaultcss.all, sty.svg___8Uo3L)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__p7RQq
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ProfileIcon
                      className={classNames(defaultcss.all, sty.svg___6CLnw)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__hyd6C
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MoreIcon
                      className={classNames(defaultcss.all, sty.svg__h8OI2)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__rtY)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__zjOSa)}>
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__sllaD)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__imRjY
                      )}
                    >
                      {"Home"}
                    </div>

                    <Spacer
                      className={classNames(
                        "__wab_instance",
                        sty.spacer___4YmFz
                      )}
                    />

                    <ActionButton
                      className={classNames(
                        "__wab_instance",
                        sty.actionButton__npsae
                      )}
                      options={["medium", "primary"]}
                      slot={"25"}
                    >
                      <MagicIcon
                        className={classNames(defaultcss.all, sty.svg__xNzXf)}
                        role={"img"}
                      />
                    </ActionButton>
                  </div>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__ozU4I)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__pjm8Z)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__tWary
                        )}
                      >
                        <Avatar
                          data-plasmic-name={"avatar"}
                          data-plasmic-override={overrides.avatar}
                          className={classNames("__wab_instance", sty.avatar)}
                        />
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(defaultcss.all, sty.freeBox__p7Yce)}
                    >
                      <textarea
                        data-plasmic-name={"newTweetInput"}
                        data-plasmic-override={overrides.newTweetInput}
                        className={classNames(
                          defaultcss.textarea,
                          sty.newTweetInput
                        )}
                        placeholder={"What's happening?" as const}
                        rows={1 as const}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__yQzuY
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__sSaZw
                          )}
                        >
                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___9M5NV
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <PictureIcon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__mkvMo
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___7Xh9A
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon3Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__rdxkg
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___0WvGo
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon4Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg___36Ala
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__cBfD
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon5Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__b7VGn
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__nG4L1
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon7Icon
                              className={classNames(
                                defaultcss.all,
                                sty.svg__dC1Cj
                              )}
                              role={"img"}
                            />
                          </ActionButton>
                        </p.Stack>

                        <Spacer
                          className={classNames(
                            "__wab_instance",
                            sty.spacer__vvFkk
                          )}
                        />

                        <Button
                          data-plasmic-name={"tweetButton"}
                          data-plasmic-override={overrides.tweetButton}
                          className={classNames(
                            "__wab_instance",
                            sty.tweetButton
                          )}
                          options={["primary"]}
                        >
                          {"Tweet"}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}

              <div
                data-plasmic-name={"tweetList"}
                data-plasmic-override={overrides.tweetList}
                className={classNames(defaultcss.all, sty.tweetList)}
              >
                <Tweet
                  className={classNames("__wab_instance", sty.tweet__ilIn9)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__yQagu)}
                  name={"Cassidy Williams"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___27M0T)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: image4ZuqK5Tne8Cuc,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__m8Gya)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___6VkvK
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__aleK)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__vyHo)}
                        displayHeight={"140px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"140px" as const}
                        src={{
                          src: image5CyUoQfqXiRyL,
                          fullWidth: 240,
                          fullHeight: 240,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__vptsR
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__fvfj9
                          )}
                        >
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                          >
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"rendezvous with cassidoo"}
                            </span>
                          </span>
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__arhOi
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__xhlqv
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__op1BX)}
                  name={"Max Stoiber"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ptC0O)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: image7YBoEbRz6OGiu,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__sj6G9)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__a2ZEx)}
                  name={"Cassidy Williams"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__jDdhA)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: image4ZuqK5Tne8Cuc,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__xowfp)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__rCjq5
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__a4FIv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dFr9X)}
                        displayHeight={"140px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"140px" as const}
                        src={{
                          src: image5CyUoQfqXiRyL,
                          fullWidth: 240,
                          fullHeight: 240,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox___4Lg
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__obknu
                          )}
                        >
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                          >
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"rendezvous with cassidoo"}
                            </span>
                          </span>
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__vOdsY
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__q79E8
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__ao0Fi)}
                  name={"Max Stoiber"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___3KrjV)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: image7YBoEbRz6OGiu,
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>
              </div>
            </div>

            {(
              hasVariant(globalVariants, "screen", "desktop") ? true : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__mDddb)}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__mcknK)}>
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__ufiC1)}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox__x4Vjl)}
                    >
                      <SearchIcon
                        className={classNames(defaultcss.all, sty.svg__iAc2)}
                        role={"img"}
                      />
                    </div>

                    <input
                      data-plasmic-name={"searchInput"}
                      data-plasmic-override={overrides.searchInput}
                      className={classNames(defaultcss.input, sty.searchInput)}
                      placeholder={"Search Twitter" as const}
                      size={1 as const}
                      type={"text" as const}
                    />
                  </div>
                </div>

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__lEcR
                  )}
                  slot={
                    <React.Fragment>
                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__whZxB
                        )}
                        slot={"Entertainment"}
                      >
                        {
                          "Adele shares photo supporting Beyoncé's Black is King"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__mcie8
                        )}
                        slot={"COVID-19"}
                      >
                        {
                          "Thousands march in Berlin to protest COVID-19 restrictions"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__mMrCv
                        )}
                        slot={"World nenws"}
                      >
                        {
                          "Russia banned from using its name, flag and anthem at the next two Olympic Games"
                        }
                      </Trend>
                    </React.Fragment>
                  }
                />

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__udMJn
                  )}
                  slot={
                    <React.Fragment>
                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__hhGds
                        )}
                        slot={"Mark Dalgleish      "}
                        slot2={"@markdalgleish"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__flZgq)}
                          displayHeight={"49px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"49px" as const}
                          src={{
                            src: image6ZDFbRojPdMu,
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </Suggestion>

                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__vorC
                        )}
                        slot={"Guillermo Rauch  "}
                        slot2={"@rauchg"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dhnpj)}
                          displayHeight={"49px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"49px" as const}
                          src={{
                            src: image8DwAxYfIwgAj5,
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </Suggestion>
                    </React.Fragment>
                  }
                >
                  {"Who to follow"}
                </SideSection>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__duIwq)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__rUdrm)}
                  >
                    <a
                      className={classNames(
                        defaultcss.a,
                        defaultcss.__wab_text,
                        sty.link__j26H
                      )}
                    >
                      {"Terms"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.a,
                        defaultcss.__wab_text,
                        sty.link__t1Bbe
                      )}
                    >
                      {"Privacy policy"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.a,
                        defaultcss.__wab_text,
                        sty.link__xwHzf
                      )}
                    >
                      {"Cookies"}
                    </a>

                    <a
                      className={classNames(
                        defaultcss.a,
                        defaultcss.__wab_text,
                        sty.link___7Uom0
                      )}
                    >
                      {"Ads info"}
                    </a>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__nNcri)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__aLuCs
                      )}
                    >
                      {"© 2021 Twitter, Inc."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "desktop") ? false : true
            ) ? (
              <div className={classNames(defaultcss.all, sty.freeBox__ge5N)}>
                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__qHe5H
                  )}
                  options={["medium", "primary"]}
                  slot={"25"}
                >
                  <HomeActiveIcon
                    className={classNames(defaultcss.all, sty.svg___5Rkcq)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__sLv5U
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <SearchIcon
                    className={classNames(defaultcss.all, sty.svg__uTjfh)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__qk5Qq
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <NotificationsIcon
                    className={classNames(defaultcss.all, sty.svg__zwVvp)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__xn5Ky
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <MessagesIcon
                    className={classNames(defaultcss.all, sty.svg__nFdi8)}
                    role={"img"}
                  />
                </ActionButton>
              </div>
            ) : null}
            {false ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__p5B1Q)}
                displayHeight={"731px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"411px" as const}
                src={{
                  src: imageEv9XLgxOEr9M,
                  fullWidth: 1079,
                  fullHeight: 1919,
                  aspectRatio: undefined
                }}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatar",
    "newTweetInput",
    "tweetButton",
    "tweetList",
    "searchInput"
  ],
  avatar: ["avatar"],
  newTweetInput: ["newTweetInput"],
  tweetButton: ["tweetButton"],
  tweetList: ["tweetList"],
  searchInput: ["searchInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  newTweetInput: "textarea";
  tweetButton: typeof Button;
  tweetList: "div";
  searchInput: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeed__VariantsArgs;
    args?: PlasmicFeed__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFeed__Fetches;
  } & Omit<PlasmicFeed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeed__ArgProps,
      internalVariantPropNames: PlasmicFeed__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    newTweetInput: makeNodeComponent("newTweetInput"),
    tweetButton: makeNodeComponent("tweetButton"),
    tweetList: makeNodeComponent("tweetList"),
    searchInput: makeNodeComponent("searchInput"),

    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
